// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit 4b41cf3d71aa85cd4e75c96cbb54324481ee0b27).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Add } from "./add_reducer.ts";
export { Add };
import { JoinGame } from "./join_game_reducer.ts";
export { JoinGame };
import { LeaveGame } from "./leave_game_reducer.ts";
export { LeaveGame };
import { SayHello } from "./say_hello_reducer.ts";
export { SayHello };
import { SetDir } from "./set_dir_reducer.ts";
export { SetDir };
import { StartRound } from "./start_round_reducer.ts";
export { StartRound };
import { Tick } from "./tick_reducer.ts";
export { Tick };

// Import and reexport all table handle types
import { PersonTableHandle } from "./person_table.ts";
export { PersonTableHandle };
import { FruitTableHandle } from "./fruit_table.ts";
export { FruitTableHandle };
import { GameStateTableHandle } from "./game_state_table.ts";
export { GameStateTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };

// Import and reexport all types
import { Dir } from "./dir_type.ts";
export { Dir };
import { Fruit } from "./fruit_type.ts";
export { Fruit };
import { FruitKind } from "./fruit_kind_type.ts";
export { FruitKind };
import { GameState } from "./game_state_type.ts";
export { GameState };
import { Person } from "./person_type.ts";
export { Person };
import { Player } from "./player_type.ts";
export { Player };

const REMOTE_MODULE = {
  tables: {
    Person: {
      tableName: "Person",
      rowType: Person.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Person.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    fruit: {
      tableName: "fruit",
      rowType: Fruit.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Fruit.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    game_state: {
      tableName: "game_state",
      rowType: GameState.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: GameState.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    Add: {
      reducerName: "Add",
      argsType: Add.getTypeScriptAlgebraicType(),
    },
    JoinGame: {
      reducerName: "JoinGame",
      argsType: JoinGame.getTypeScriptAlgebraicType(),
    },
    LeaveGame: {
      reducerName: "LeaveGame",
      argsType: LeaveGame.getTypeScriptAlgebraicType(),
    },
    SayHello: {
      reducerName: "SayHello",
      argsType: SayHello.getTypeScriptAlgebraicType(),
    },
    SetDir: {
      reducerName: "SetDir",
      argsType: SetDir.getTypeScriptAlgebraicType(),
    },
    StartRound: {
      reducerName: "StartRound",
      argsType: StartRound.getTypeScriptAlgebraicType(),
    },
    Tick: {
      reducerName: "Tick",
      argsType: Tick.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.3.2",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Add", args: Add }
| { name: "JoinGame", args: JoinGame }
| { name: "LeaveGame", args: LeaveGame }
| { name: "SayHello", args: SayHello }
| { name: "SetDir", args: SetDir }
| { name: "StartRound", args: StartRound }
| { name: "Tick", args: Tick }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  add(name: string, age: number) {
    const __args = { name, age };
    let __writer = new BinaryWriter(1024);
    Add.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("Add", __argsBuffer, this.setCallReducerFlags.addFlags);
  }

  onAdd(callback: (ctx: ReducerEventContext, name: string, age: number) => void) {
    this.connection.onReducer("Add", callback);
  }

  removeOnAdd(callback: (ctx: ReducerEventContext, name: string, age: number) => void) {
    this.connection.offReducer("Add", callback);
  }

  joinGame(playerId: string, nick: string) {
    const __args = { playerId, nick };
    let __writer = new BinaryWriter(1024);
    JoinGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("JoinGame", __argsBuffer, this.setCallReducerFlags.joinGameFlags);
  }

  onJoinGame(callback: (ctx: ReducerEventContext, playerId: string, nick: string) => void) {
    this.connection.onReducer("JoinGame", callback);
  }

  removeOnJoinGame(callback: (ctx: ReducerEventContext, playerId: string, nick: string) => void) {
    this.connection.offReducer("JoinGame", callback);
  }

  leaveGame(playerId: string) {
    const __args = { playerId };
    let __writer = new BinaryWriter(1024);
    LeaveGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("LeaveGame", __argsBuffer, this.setCallReducerFlags.leaveGameFlags);
  }

  onLeaveGame(callback: (ctx: ReducerEventContext, playerId: string) => void) {
    this.connection.onReducer("LeaveGame", callback);
  }

  removeOnLeaveGame(callback: (ctx: ReducerEventContext, playerId: string) => void) {
    this.connection.offReducer("LeaveGame", callback);
  }

  sayHello() {
    this.connection.callReducer("SayHello", new Uint8Array(0), this.setCallReducerFlags.sayHelloFlags);
  }

  onSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("SayHello", callback);
  }

  removeOnSayHello(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("SayHello", callback);
  }

  setDir(playerId: string, dir: string) {
    const __args = { playerId, dir };
    let __writer = new BinaryWriter(1024);
    SetDir.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SetDir", __argsBuffer, this.setCallReducerFlags.setDirFlags);
  }

  onSetDir(callback: (ctx: ReducerEventContext, playerId: string, dir: string) => void) {
    this.connection.onReducer("SetDir", callback);
  }

  removeOnSetDir(callback: (ctx: ReducerEventContext, playerId: string, dir: string) => void) {
    this.connection.offReducer("SetDir", callback);
  }

  startRound(seconds: number) {
    const __args = { seconds };
    let __writer = new BinaryWriter(1024);
    StartRound.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("StartRound", __argsBuffer, this.setCallReducerFlags.startRoundFlags);
  }

  onStartRound(callback: (ctx: ReducerEventContext, seconds: number) => void) {
    this.connection.onReducer("StartRound", callback);
  }

  removeOnStartRound(callback: (ctx: ReducerEventContext, seconds: number) => void) {
    this.connection.offReducer("StartRound", callback);
  }

  tick() {
    this.connection.callReducer("Tick", new Uint8Array(0), this.setCallReducerFlags.tickFlags);
  }

  onTick(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("Tick", callback);
  }

  removeOnTick(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("Tick", callback);
  }

}

export class SetReducerFlags {
  addFlags: CallReducerFlags = 'FullUpdate';
  add(flags: CallReducerFlags) {
    this.addFlags = flags;
  }

  joinGameFlags: CallReducerFlags = 'FullUpdate';
  joinGame(flags: CallReducerFlags) {
    this.joinGameFlags = flags;
  }

  leaveGameFlags: CallReducerFlags = 'FullUpdate';
  leaveGame(flags: CallReducerFlags) {
    this.leaveGameFlags = flags;
  }

  sayHelloFlags: CallReducerFlags = 'FullUpdate';
  sayHello(flags: CallReducerFlags) {
    this.sayHelloFlags = flags;
  }

  setDirFlags: CallReducerFlags = 'FullUpdate';
  setDir(flags: CallReducerFlags) {
    this.setDirFlags = flags;
  }

  startRoundFlags: CallReducerFlags = 'FullUpdate';
  startRound(flags: CallReducerFlags) {
    this.startRoundFlags = flags;
  }

  tickFlags: CallReducerFlags = 'FullUpdate';
  tick(flags: CallReducerFlags) {
    this.tickFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get person(): PersonTableHandle {
    return new PersonTableHandle(this.connection.clientCache.getOrCreateTable<Person>(REMOTE_MODULE.tables.Person));
  }

  get fruit(): FruitTableHandle {
    return new FruitTableHandle(this.connection.clientCache.getOrCreateTable<Fruit>(REMOTE_MODULE.tables.fruit));
  }

  get gameState(): GameStateTableHandle {
    return new GameStateTableHandle(this.connection.clientCache.getOrCreateTable<GameState>(REMOTE_MODULE.tables.game_state));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
